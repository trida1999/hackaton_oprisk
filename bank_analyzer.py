from crewai import Agent, Task, Crew, Process
from langchain_openai import ChatOpenAI
from typing import Type, Optional, Dict, List
import json
from crewai.tools import tool
from striprtf.striprtf import rtf_to_text
import chardet

import os
from dotenv import load_dotenv

# 1. Загрузка переменных окружения
load_dotenv()

import logging
logging.basicConfig(level=logging.INFO)

# ----------------------------
# Инициализация LLM
# ----------------------------

#llm = ChatOpenAI(
#    openai_api_base="https://openrouter.ai/api/v1",
#    openai_api_key="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",
#    model_name="qwen/qwen3-4b:free"
#)

llm = ChatOpenAI(
    model="openrouter/qwen/qwen3-14b:free",
    #model="openrouter/qwen/qwen2.5-vl-72b-instruct:free",
    openai_api_base="https://openrouter.ai/api/v1",
    openai_api_key=os.getenv("OPENROUTER_API_KEY"),
    temperature=0.3,
    headers={
        "HTTP-Referer": "",  # Укажите ваш URL
        "X-Title": ""  # Название вашего приложения
    }
)

def read_rtf(file_path):
    print(f"Чтение файла: {file_path}")
    with open(file_path, 'rb') as file:
        raw_content = file.read()

        encoding = chardet.detect(raw_content)['encoding']
        try:
            decoded_content = raw_content.decode(encoding or 'cp1251')
        except UnicodeDecodeError:
            decoded_content = raw_content.decode('cp1251', errors='replace')

    text = rtf_to_text(decoded_content)
    print(f"read symbols: {len(text)}");
    return text

# ----------------------------
# Исправленные инструменты (совместимый способ)
# ----------------------------

# Способ 1: Использование декоратора @tool (рекомендуемый)
@tool
def access_data_files(file_name: str) -> Dict:
    """Возвращает данные из указанного файла в папке data (companies.json или reviews.json)"""
    with open(file_name, 'r', encoding='utf-8') as f:
        return json.load(f)

@tool
def access_risk_methodology() -> str:
    """Возвращает ключевые положения методологии 716-П по операционному риску"""
    #очень большой текс документа, он не влезает в контекст 40К
    #return read_rtf('data/Положение_Банка_России_от_08_04_2020_N_716_П_ред_от_25_03_1.rtf')
    return """
    Продажа неподходящих продуктов (Unsuitable selling).
Продажа финансовых продуктов или услуг, не отвечающих интересам клиентов.

Продажа продуктов социально незащищенным и уязвимым категориям клиентов
•	Продажа инвестиционных продуктов, предполагающих получение дохода в долгосрочной перспективе, социально незащищенным слоям населения и гражданам пенсионного возраста. При досрочном выходе из таких продуктов не возвращается сумма изначально инвестированных средств.
•	Продажа продуктов с высоким уровнем риска без оценки аппетита к риску клиента.
Продажа сложных финансовых продуктов лицам, не обладающим достаточным опытом и знаниями
•	Продажа сложных финансовых продуктов гражданам, у которых нет профильных знаний (опыта) работы для расчета их доходности.
•	Продажа гражданам сложных финансовых продуктов без оценки или формальной оценки знаний клиента.

Непрозрачное ценообразование (Mispricing)
Введение в заблуждение относительно размера комиссий, стоимости (справедливой стоимости) финансового продукта или услуги.
Предложение продуктов и услуг со скрытыми и непрозрачными комиссиями
•	Установление двойных комиссий в связи с приобретением одного финансового продукта или услуги (например, взимание комиссии за управление паевым инвестиционным фондом наряду с комиссией за доверительное управление инвестиционным портфелем клиентов, в состав активов которого приобретаются инвестиционные паи фонда).
Предложение финансовых продуктов и услуг, ценовые параметры (размер процентной ставки, премии, комиссии и другое) которых ущемляют интересы клиента
•	Предложение потребителю финансового продукта или услуги, стоимость которых (комиссии по которым) существенно отклоняются от параметров аналогичных сделок на рынке (предложение заключить опционный договор с взиманием завышенной премии, предложение выкупа ликвидных ценных бумаг на внебиржевом рынке по заниженной цене, применение сложных тарифов с завышенными комиссиями).
•	Неразъяснение гражданину информации о полной стоимости продукта или услуги, а также о дополнительных расходах, связанных с их приобретением и хранением.
•	Предложение потребителю финансового продукта без разъяснения информации о том, что данный продукт предполагает фиксированный ежегодный взнос.
Навязывание продуктов в целях начисления дополнительных комиссий (Churning)
•	Навязывание брокером или агентом финансовой организации приобретения финансовых инструментов (услуг) совершения сделок за счет клиента в целях увеличения комиссии (агентского вознаграждения), не имеющих экономического смысла для клиента.


Связанная продажа (Tied selling)
Практика компании, предоставляющей финансовый продукт или услугу при условии, что клиент покупает какой-либо другой продукт или услугу.
•	Включение договора об обязательном пенсионном страховании в комплект документов, необходимых для получения договора займа.
•	Предоставление кредита только при условии приобретения определенного страхового продукта.
•	Включение в договор на оказание банковского обслуживания депозитарных и брокерских договоров как обязательного условия приобретения банковского продукта.
•	Неотражение в заявлении о предоставлении потребительского кредита дополнительной платной услуги, например сертификата на круглосуточную квалифицированную юридическую поддержку.

Подмена продукта (Misselling)
Предложение одного финансового продукта (услуги) под видом другого.
•	Предложение комбинированного продукта, инвестиционного или страхового продукта под видом банковского вклада.
•	Предложение услуг компаний, не имеющих лицензию Банка России (не входящих в реестр Банка России), под видом лицензированной деятельности.

    """

# ----------------------------
# Определение агентов
# ----------------------------
senior_analyst = Agent(
    role='Старший аналитик данных',
    goal='Анализировать данные отзывов и выявлять ключевые метрики',
    backstory='Опытный аналитик с 10-летним стажем в банковской сфере',
    tools=[access_data_files],
    llm=llm,
    verbose=True
)

risk_assistant = Agent(
    role='Риск-ассистент',
    goal='Идентифицировать операционные риски и недобросовестные практики на основе отзывов клиентов',
    backstory='Специалист по управлению рисками с глубокими знаниями методологии 716-П '
              'и опытом выявления операционных инцидентов в банковской сфере.',
    tools=[access_data_files, access_risk_methodology],
    verbose=True,
    allow_delegation=False,
    llm = llm
)

insights_agent = Agent(
    role='Агент выявления инсайтов',
    goal='Формулировать краткие выводы и ключевые особенности по каждому отделению банка',
    backstory='Эксперт по интерпретации данных, способный выделять наиболее значимые '
              'аспекты из большого объема информации и представлять их в сжатом виде.',
    verbose=True,
    allow_delegation=False,
    llm = llm
)

report_builder = Agent(
    role='Агент построения отчетов',
    goal='Создавать понятные и структурированные отчеты на основе данных от других агентов',
    backstory='Профессиональный технический писатель с опытом подготовки аналитических '
              'отчетов для высшего руководства банка.',
    verbose=True,
    allow_delegation=False,
    llm = llm
)

critic = Agent(
    role='Критик',
    goal='Оценивать качество и полноту аналитических выводов, предоставленных другими агентами',
    backstory='Независимый эксперт с критическим мышлением, отвечающий за контроль '
              'качества аналитических материалов перед их представлением руководству.',
    verbose=True,
    allow_delegation=False,
    llm = llm
)

# ----------------------------
# Определение задач
# ----------------------------

def create_analysis_tasks(question: str) -> List[Task]:
    """Создает список задач для анализа отзывов банковских отделений"""
    
    # Задача для старшего аналитика
    data_analysis_task = Task(
        description=f"""
        Проанализируйте данные отзывов банковских отделений и подготовьте аналитическую справку.
        Вопрос для анализа: {question}
        
        В вашем анализе должны быть:
        1. Средние рейтинги по каждому отделению
        2. Распределение тональности отзывов (позитивные, негативные, нейтральные)
        3. Динамика отзывов по времени
        4. Выявление отделений с лучшими и худшими показателями
        """,
        agent=senior_analyst,
        expected_output="""
        Детальный аналитический отчет с таблицами и графиками, показывающий:
        - Средние рейтинги по отделениям
        - Распределение тональности отзывов
        - Динамику изменения оценок с течением времени
        - Рейтинг отделений от лучшего к худшему
        """
    )

    # Задача для риск-ассистента
    risk_analysis_task = Task(
        description=f"""
        На основе отзывов клиентов идентифицируйте потенциальные операционные риски 
        и случаи недобросовестных практик в банковских отделениях.
        Вопрос для анализа: {question}
        
        Используйте методологию 716-П для классификации выявленных рисков.
        Особое внимание уделите:
        1. Жалобам на навязывание услуг
        2. Скрытым комиссиям и платежам
        3. Некомпетентности сотрудников
        4. Техническим сбоям
        """,
        agent=risk_assistant,
        expected_output="""
        Отчет о выявленных операционных рисках, содержащий:
        - Классификацию рисков по методологии 716-П
        - Список наиболее частых инцидентов
        - Отделения с наибольшим количеством жалоб
        - Рекомендации по снижению рисков
        """
    )

    # Задача для агента инсайтов
    insights_task = Task(
        description=f"""
        На основе данных аналитиков сформулируйте ключевые инсайты и выводы 
        по каждому банковскому отделению.
        Вопрос для анализа: {question}
        
        Обратите внимание на:
        1. Уникальные особенности каждого отделения
        2. Основные проблемы и преимущества
        3. Рекомендации по улучшению
        """,
        agent=insights_agent,
        expected_output="""
        Краткий отчет с ключевыми выводами по каждому отделению, содержащий:
        - Основные сильные и слабые стороны
        - Уникальные особенности работы
        - Рекомендации для руководства
        """
    )

    # Задача для построения отчетов
    report_task = Task(
        description=f"""
        На основе данных от всех аналитиков подготовьте итоговый отчет, 
        отвечающий на вопрос: {question}
        
        Отчет должен быть:
        1. Структурированным и понятным
        2. Содержать ключевые выводы
        3. Включать рекомендации для руководства
        4. Быть адаптирован для презентации топ-менеджменту
        """,
        agent=report_builder,
        expected_output="""
        Профессиональный отчет в формате презентации, содержащий:
        - Ответ на исходный вопрос
        - Ключевые выводы
        - Визуализации данных
        - Рекомендации по улучшению
        """
    )

    # Задача для критика
    critique_task = Task(
        description=f"""
        Критически оцените качество аналитического отчета, подготовленного командой.
        Проверьте:
        1. Полноту ответа на вопрос: {question}
        2. Обоснованность выводов
        3. Качество визуализаций
        4. Практическую применимость рекомендаций
        
        Предоставьте конструктивную критику и предложения по улучшению.
        """,
        agent=critic,
        expected_output="""
        Отчет о качестве аналитики, содержащий:
        - Оценку полноты и достоверности данных
        - Критику слабых мест в анализе
        - Предложения по улучшению отчетности
        - Общую оценку качества работы команды
        """
    )

    return [data_analysis_task, risk_analysis_task, insights_task, report_task, critique_task]

# ----------------------------
# Функция для запуска анализа
# ----------------------------

def analyze_bank_reviews(question: str):
    """Запускает мультиагентный анализ отзывов банковских отделений"""
    
    # Создаем задачи
    tasks = create_analysis_tasks(question)

    # Формируем команду агентов
    crew = Crew(
        agents=[senior_analyst, risk_assistant, insights_agent, report_builder, critic],
        tasks=tasks,
        process=Process.sequential  # Задачи выполняются последовательно
    )
    
    # Запускаем выполнение задач
    result = crew.kickoff()
    
    return result

# ----------------------------
# Запуск системы
# ----------------------------
if __name__ == "__main__":
    try:

        print("🚀 Запуск анализа...")
        result = analyze_bank_reviews("Проанализируйте данные из reviews.json и найдите инциденты операционного риска в отделениях")
        #result = crew.kickoff()
        print("\n📊 Результат:", result)

    except Exception as e:
        print(f"❌ Ошибка: {e}")