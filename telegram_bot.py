import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
import json
import logging
#from bank_analyzer import analyze_bank_reviews  # –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
from telegram.constants import ParseMode

import asyncio
from typing import Optional

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
from main import analyze_bank_reviews, shared_memory  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–∞–º—è—Ç—å

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
def split_message(text: str, max_length: int = 4000) -> list:
    """–£–º–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    if not text:
        return []
    
    if len(text) <= max_length:
        return [text]
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–∞–∑–±–∏–≤–∫–∏: –∞–±–∑–∞—Ü—ã ‚Üí –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Üí —Å–ª–æ–≤–∞ ‚Üí –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    split_chars = ['\n\n', '\n', '. ', '! ', '? ', ' ', '']
    
    parts = []
    remaining = text
    
    while remaining:
        for delimiter in split_chars:
            pos = remaining.rfind(delimiter, 0, max_length) if delimiter else max_length
            if pos > 0:
                part = remaining[:pos + (len(delimiter) if delimiter else pos)]
                parts.append(part.strip())
                remaining = remaining[pos + len(delimiter):].strip()
                break
        else:
            parts.append(remaining[:max_length])
            remaining = remaining[max_length:]
    
    return parts
# -------------------------------------------

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
user_sessions = {}

logging.basicConfig(
    filename='bot.log',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

class UserSession:
    def __init__(self, user_id):
        self.user_id = user_id
        self.current_query = None
        self.analysis_in_progress = False
        self.last_results = None
        self.full_report = None  
        self.context = ""

async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_sessions[user_id] = UserSession(user_id)
    
    keyboard = [
        [InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤", callback_data='start_analysis')],
        [InlineKeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data='last_results')],
        [InlineKeyboardButton("üß† –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data='show_memory')]
    ]
    
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤\n"
        "2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "3. –ò–∑—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    session = user_sessions.get(user_id, UserSession(user_id))

    if query.data == 'start_analysis':
        session.analysis_in_progress = True
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ù–∞–π—Ç–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã —Å –Ω–∞–≤—è–∑—ã–≤–∞–Ω–∏–µ–º —É—Å–ª—É–≥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü')")
    
    elif query.data == 'last_results' and session.last_results:
        await query.edit_message_text(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n{session.last_results[:4000]}...")
    
    elif query.data == 'show_memory':
        memory_context = shared_memory.get_context()
        await query.edit_message_text(f"üß† –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏:\n\n{memory_context[:4000]}...")
    
    elif query.data == 'full_report':
        if session.last_results:
            chunks = split_message(session.last_results)
            for chunk in chunks:
                await query.message.reply_text(chunk)
        else:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    elif query.data == 'show_context':
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –æ–±—â–µ–π –ø–∞–º—è—Ç–∏
        current_context = shared_memory.get_context()
        if current_context:
            chunks = split_message(current_context)
            for chunk in chunks:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=chunk
                )
        else:
            await query.edit_message_text("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç.")

    elif query.data == 'clear_context':
        session.context = ""  # –ò–ª–∏ session.context = ""
        await query.edit_message_text("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

async def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = user_sessions.get(user_id)
    
    if not session or not session.analysis_in_progress:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é /start")
        return
    try:
        await update.message.reply_text("üîÑ –ê–≥–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –¥–∞–Ω–Ω—ã–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –û–¢–ß–ï–¢ (–Ω–µ –≤—ã–≤–æ–¥ –∫—Ä–∏—Ç–∏–∫–∞)
        report = analyze_bank_reviews(update.message.text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        session.last_results = report
        session.analysis_in_progress = False
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
        chunks = split_message(report)
        for chunk in chunks:
            await update.message.reply_text(chunk)
        session.context = shared_memory.get_context()
            
        # –û—Ç–¥–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data='start_analysis')],
            [InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data='full_report')],
            [InlineKeyboardButton("üß† –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data='show_context')],
            [InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data='clear_context')]
            

        ]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",  reply_markup=InlineKeyboardMarkup(keyboard))        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)[:300]}")

async def error_handler(update: Update, context: CallbackContext):
    await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()